/*
 * ProjectFrame.java
 *
 * Created on 2010-04-16, 08:21:15
 */
package jmhc.forms;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.sql.SQLException;
import java.util.AbstractList;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Scanner;
import java.util.Set;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import java.util.prefs.Preferences;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import jmhc.processing.AllelLoadToDB;
import jmhc.processing.AllelsTableInfo;
import jmhc.processing.FastFileFilter;
import jmhc.processing.SQLiteFileFilter;
import jmhc.processing.TxtFileFilter;
import jmhc.objects.DBSettings;
import jmhc.objects.PathChecker;
import org.biojava.bio.BioException;
import org.biojava.bio.seq.Sequence;
import org.biojava.bio.seq.SequenceIterator;
import org.biojava.bio.seq.io.SeqIOTools;
import jmhc.tools.SeqUtils;

/**
 *
 * @author Michal Stuglik
 */
public class ProjectFrame extends javax.swing.JInternalFrame {

    private Preferences prefs;
    private ProgramControler ProgramControler;
    private JLabel jLabel_statusLabel;
    private static String connected = "connected";
    private static String notconnected = "not connected";
    private List<String> illegal_Path_elements;

    public List<String> getIllegal_Path_elements() {
        if (illegal_Path_elements == null) {
            //:*?"<>|/\ 
            illegal_Path_elements = new ArrayList<String>();
            illegal_Path_elements.add("/");
            illegal_Path_elements.add("//");
            illegal_Path_elements.add(":");
            illegal_Path_elements.add("*");
            illegal_Path_elements.add("?");
            illegal_Path_elements.add("\"");
            illegal_Path_elements.add("<");
            illegal_Path_elements.add(">");
            illegal_Path_elements.add("|");
            illegal_Path_elements.add("\\");
            illegal_Path_elements.add(" ");
        }
        return illegal_Path_elements;
    }

    /** Creates new form ProjectFrame */
    public ProjectFrame(ProgramControler mProgramControler, JLabel jLabel_statusLabel) {
        initComponents();

        // create a Preferences instance (somewhere later in the code)
        prefs = Preferences.userNodeForPackage(this.getClass());
        this.ProgramControler = mProgramControler;
        this.jLabel_statusLabel = jLabel_statusLabel;

        String muscle = prefs.get("MUSCLE_FILE", null);
        if (muscle != null && !muscle.isEmpty()) {
            File mf = new File(muscle);
            if (mf.exists()) {
                this.jTextField_muscle.setText(mf.getAbsolutePath());
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jRadioButton_new = new javax.swing.JRadioButton();
        jRadioButton_open = new javax.swing.JRadioButton();
        connectionStatusLabel = new javax.swing.JLabel();
        jButton_close = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jButton_openDB = new javax.swing.JButton();
        jButton_allel = new javax.swing.JButton();
        jButton_tags = new javax.swing.JButton();
        jButton_muscle = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextField_muscle = new javax.swing.JTextField();
        jTextField_tags = new javax.swing.JTextField();
        jTextField_allel = new javax.swing.JTextField();
        jTextField_dbPath = new javax.swing.JTextField();

        setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setIconifiable(true);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(jmhc.forms.JMHCApp.class).getContext().getResourceMap(ProjectFrame.class);
        setTitle(resourceMap.getString("Project.title")); // NOI18N
        setName("Project"); // NOI18N
        setPreferredSize(new java.awt.Dimension(514, 240));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameActivated(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
        });
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jPanel2.setName("jPanel2"); // NOI18N

        jRadioButton_new.setText(resourceMap.getString("jRadioButton_new.text")); // NOI18N
        jRadioButton_new.setActionCommand(resourceMap.getString("jRadioButton_new.actionCommand")); // NOI18N
        jRadioButton_new.setName("jRadioButton_new"); // NOI18N
        jRadioButton_new.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton_newActionPerformed(evt);
            }
        });

        jRadioButton_open.setSelected(true);
        jRadioButton_open.setText(resourceMap.getString("jRadioButton_open.text")); // NOI18N
        jRadioButton_open.setName("jRadioButton_open"); // NOI18N
        jRadioButton_open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton_openActionPerformed(evt);
            }
        });

        connectionStatusLabel.setFont(resourceMap.getFont("connectionStatusLabel.font")); // NOI18N
        connectionStatusLabel.setText(resourceMap.getString("connectionStatusLabel.text")); // NOI18N
        connectionStatusLabel.setName("connectionStatusLabel"); // NOI18N

        jButton_close.setIcon(resourceMap.getIcon("jButton_close.icon")); // NOI18N
        jButton_close.setText(resourceMap.getString("jButton_close.text")); // NOI18N
        jButton_close.setName("jButton_close"); // NOI18N
        jButton_close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_closeActionPerformed(evt);
            }
        });

        jPanel3.setName("jPanel3"); // NOI18N

        jButton_openDB.setIcon(resourceMap.getIcon("jButton_openDB.icon")); // NOI18N
        jButton_openDB.setText(resourceMap.getString("jButton_openDB.text")); // NOI18N
        jButton_openDB.setMaximumSize(new java.awt.Dimension(79, 25));
        jButton_openDB.setMinimumSize(new java.awt.Dimension(79, 25));
        jButton_openDB.setName("jButton_openDB"); // NOI18N
        jButton_openDB.setPreferredSize(new java.awt.Dimension(79, 25));
        jButton_openDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_openDBActionPerformed(evt);
            }
        });

        jButton_allel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jmhc/forms/resources/open16.gif"))); // NOI18N
        jButton_allel.setText(resourceMap.getString("jButton_allel.text")); // NOI18N
        jButton_allel.setName("jButton_allel"); // NOI18N
        jButton_allel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_allelActionPerformed(evt);
            }
        });

        jButton_tags.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jmhc/forms/resources/open16.gif"))); // NOI18N
        jButton_tags.setText(resourceMap.getString("jButton_tags.text")); // NOI18N
        jButton_tags.setName("jButton_tags"); // NOI18N
        jButton_tags.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_tagsActionPerformed(evt);
            }
        });

        jButton_muscle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jmhc/forms/resources/open16.gif"))); // NOI18N
        jButton_muscle.setText(resourceMap.getString("jButton_muscle.text")); // NOI18N
        jButton_muscle.setName("jButton_muscle"); // NOI18N
        jButton_muscle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_muscleActionPerformed(evt);
            }
        });

        jLabel2.setFont(resourceMap.getFont("jLabel2.font")); // NOI18N
        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jLabel1.setFont(resourceMap.getFont("jLabel1.font")); // NOI18N
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jLabel3.setFont(resourceMap.getFont("jLabel1.font")); // NOI18N
        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setToolTipText(resourceMap.getString("jLabel3.toolTipText")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        jLabel4.setFont(resourceMap.getFont("jLabel1.font")); // NOI18N
        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        jTextField_muscle.setEditable(false);
        jTextField_muscle.setMaximumSize(new java.awt.Dimension(6, 2147483647));
        jTextField_muscle.setName("jTextField_muscle"); // NOI18N

        jTextField_tags.setEditable(false);
        jTextField_tags.setMaximumSize(new java.awt.Dimension(6, 2147483647));
        jTextField_tags.setName("jTextField_tags"); // NOI18N

        jTextField_allel.setEditable(false);
        jTextField_allel.setText(resourceMap.getString("jTextField_allels.text")); // NOI18N
        jTextField_allel.setMaximumSize(new java.awt.Dimension(6, 2147483647));
        jTextField_allel.setName("jTextField_allels"); // NOI18N

        jTextField_dbPath.setEditable(false);
        jTextField_dbPath.setText(resourceMap.getString("jTextField_dbPath.text")); // NOI18N
        jTextField_dbPath.setMaximumSize(new java.awt.Dimension(6, 2147483647));
        jTextField_dbPath.setName("jTextField_dbPath"); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3))
                        .addGap(17, 17, 17))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton_openDB, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_allel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_tags, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE)
                    .addComponent(jButton_muscle, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField_muscle, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                    .addComponent(jTextField_tags, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                    .addComponent(jTextField_allel, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                    .addComponent(jTextField_dbPath, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButton_allel, jButton_muscle, jButton_openDB, jButton_tags});

        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jButton_openDB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField_dbPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_allel)
                    .addComponent(jLabel1)
                    .addComponent(jTextField_allel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_tags)
                    .addComponent(jLabel3)
                    .addComponent(jTextField_tags, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_muscle)
                    .addComponent(jLabel4)
                    .addComponent(jTextField_muscle, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jTextField_allel, jTextField_dbPath, jTextField_muscle, jTextField_tags});

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButton_allel, jButton_muscle, jButton_openDB, jButton_tags});

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jRadioButton_new)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jRadioButton_open)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(connectionStatusLabel))
                    .addComponent(jButton_close, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton_new)
                    .addComponent(jRadioButton_open)
                    .addComponent(connectionStatusLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton_close)
                .addGap(13, 13, 13))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_closeActionPerformed
        prefs.put("MUSCLE_FILE", this.jTextField_muscle.getText());
        this.setVisible(false);
    }//GEN-LAST:event_jButton_closeActionPerformed

    private void jRadioButton_newActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton_newActionPerformed
        jRadioButton_open.setSelected(!jRadioButton_new.isSelected());
        jTextField_dbPath.setText("");
        CloseConnection();
    }//GEN-LAST:event_jRadioButton_newActionPerformed

    private void CloseConnection() {
        try {
            if (this.ProgramControler != null && this.ProgramControler.DBSettings != null && this.ProgramControler.DBSettings.getMSQLite() != null) {
                this.ProgramControler.DBSettings.getMSQLite().Close();
                if (this.ProgramControler.DBSettings.getMSQLite().connection == null || this.ProgramControler.DBSettings.getMSQLite().connection.isClosed()) {
                    connectionStatusLabel.setText(notconnected);
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(DBSettings.loggerProgram).log(Level.SEVERE, null, ex);
        }
    }

    private boolean isConnected() {
        boolean result = false;
        try {
            //Data base settings
            if (this.ProgramControler.DBSettings == null || this.ProgramControler.DBSettings.getMSQLite() == null) {
                return false;
            }

            if (this.ProgramControler.DBSettings.getMSQLite().getConnection() == null) {
                return false;
            } else {
                result = true;
            }

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(DBSettings.loggerProgram).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this,
                    ex.getMessage(), this.getName(), JOptionPane.ERROR_MESSAGE);
        } catch (SQLException ex) {
            Logger.getLogger(DBSettings.loggerProgram).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this,
                    ex.getMessage(), this.getName(), JOptionPane.ERROR_MESSAGE);
        }
        return result;
    }

    private void jButton_openDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_openDBActionPerformed

        JFileChooser chooser = null;
        String extension = DBSettings.dataBase_extension;
        String filePath = "";

        try {

            chooser = new JFileChooser();
            chooser.setMultiSelectionEnabled(false);
            chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
            chooser.setFileFilter(new SQLiteFileFilter());
            String lastDir = prefs.get("LAST_OUTPUT_DIR", null);
            if (lastDir != null && !lastDir.isEmpty()) {
                chooser.setCurrentDirectory(new File(lastDir));
            }
            int result = -1;
            if (jRadioButton_new.isSelected()) {
                result = chooser.showSaveDialog(this);
            } else if (jRadioButton_open.isSelected()) {
                result = chooser.showOpenDialog(this);
            }

            if (result == JFileChooser.APPROVE_OPTION) {
                File file = chooser.getSelectedFile();
                if (jRadioButton_new.isSelected()) {
                    filePath = file.getAbsolutePath();
                    if (!filePath.endsWith(extension)) {
                        filePath += extension;
                    }

                    file = new File(filePath);

                    if (file.exists()) {
                        int reply = JOptionPane.showConfirmDialog(this, "overwrite existing file", "What to do?", JOptionPane.YES_NO_OPTION);
                        if (reply == JOptionPane.YES_OPTION) {
                            jTextField_dbPath.setText(file.getAbsolutePath());
                            file.delete();
                        } else {
                            jTextField_dbPath.setText("");
                            this.CloseConnection();
                            return;
                        }
                    } else {
                        jTextField_dbPath.setText(file.getAbsolutePath());
                    }
                } else if (jRadioButton_open.isSelected()) {
                    if (!file.exists()) {
                        throw new Exception("no such file");
                    }
                    jTextField_dbPath.setText(file.getAbsolutePath());

                } //save last path
                prefs.put("LAST_OUTPUT_DIR", file.getAbsolutePath());
            } else {
                jTextField_dbPath.setText("");
            }

            String path = jTextField_dbPath.getText();
            if (!path.isEmpty()) {
                ConnectToDataBase(path);
            }

            CheckConnectionStatus();

        } catch (Exception ex) {
            Logger.getLogger(DBSettings.loggerProgram).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this,
                    ex.getMessage(), this.getName(), JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton_openDBActionPerformed

    private void CheckConnectionStatus() {
        if (this.ProgramControler.DBSettings != null && this.ProgramControler.DBSettings.getMSQLite() != null) {
            connectionStatusLabel.setText(connected);
        } else {
            connectionStatusLabel.setText(notconnected);
        }
    }

    private void ConnectToDataBase(String path) {
        DBSettings mDBSettings = null;
        try {
            if (path.isEmpty()) {
                throw new Exception("Empty path!");
            } else {

                if (jRadioButton_new.isSelected()) {
                    mDBSettings = new DBSettings(path);
                    mDBSettings.recreate_ExtractTable();
                    mDBSettings.recreate_AllelTable();
                    mDBSettings.recreate_InfoTable();
                    mDBSettings.recreate_TagsTable();

                    this.ProgramControler.setDBSettings(mDBSettings);

                    if (mDBSettings.getMSQLite() != null) {
                        JOptionPane.showMessageDialog(this,
                                "Database connected", this.getName(), JOptionPane.INFORMATION_MESSAGE);
                    }

                } else if (jRadioButton_open.isSelected()) {
                    mDBSettings = new DBSettings(path);
                    this.ProgramControler.setDBSettings(mDBSettings);

                    if (mDBSettings.getMSQLite() != null) {
                        JOptionPane.showMessageDialog(this,
                                "Database connected", this.getName(), JOptionPane.INFORMATION_MESSAGE);
                    }
                }

                //PRAGMA_synchronus_OFF
                if (mDBSettings.getMSQLite() != null) {
                    mDBSettings.PRAGMA_settings_ON_Start();
                }

                //logger init:
                if (mDBSettings.getMSQLite() != null) {
                    this.LoggerDataBaseInit(path);
                }
            }

        } catch (Exception ex) {
            Logger.getLogger(DBSettings.loggerProgram).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this,
                    ex.getMessage(), this.getName(), JOptionPane.ERROR_MESSAGE);
        }
    }

    private void LoggerDataBaseInit(String path) {

        Logger baseLogger = Logger.getLogger(DBSettings.loggerDataBase);
        FileHandler fh = null;
        try {
            fh = new FileHandler(path + ".log", true);

            baseLogger.addHandler(fh);
            baseLogger.setLevel(Level.ALL);
            SimpleFormatter formatter = new SimpleFormatter();
            fh.setFormatter(formatter);

        } catch (IOException ex) {
            Logger.getLogger(DBSettings.loggerProgram).log(Level.SEVERE, null, ex);
        } catch (SecurityException ex) {
            Logger.getLogger(DBSettings.loggerProgram).log(Level.SEVERE, null, ex);
        }
    }

    private void LoadAllelsToDatabase(String path) {

        BufferedReader br = null;
        DBSettings mDBSettings = null;
        int insertCounter = 0;
        try {

            //Data base settings
            if (this.ProgramControler.DBSettings == null || this.ProgramControler.DBSettings.getMSQLite() == null) {
                throw new Exception(DBSettings.exc_connectToDataBase);
            } else {
                mDBSettings = this.ProgramControler.DBSettings;
            }

            //checkpoint:
            mDBSettings.check_ExistingData(DBSettings.allel_tableName, this);
            if (path.isEmpty()) {
                throw new Exception("Empty path");
            }

            br = new BufferedReader(new FileReader(path));

            SequenceIterator iter = (SequenceIterator) SeqIOTools.fileToBiojava("fasta", "dna", br);
            Sequence sequence = null;
            while (iter.hasNext()) {
                try {
                    sequence = iter.nextSequence();

                    String name = sequence.getName();
                    String value = sequence.seqString().toUpperCase();
                    int length = value.length();
                    @SuppressWarnings("static-access")
                    String sql = "INSERT INTO " + mDBSettings.allel_tableName + " "
                            + "(" + mDBSettings.allel_header + "," + mDBSettings.allel_sequence + "," + mDBSettings.allel_length + ") "
                            + "VALUES ('" + name + "','" + value + "'," + length + ")";
                    this.ProgramControler.DBSettings.getMSQLite().Execute(sql);

                    insertCounter++;
                    if (insertCounter % 100 == 0) {
                        SeqUtils.SetStatus(jLabel_statusLabel, "Loading alleles..." + insertCounter);
                    }
                } catch (BioException bex) {
                    Logger.getLogger(ProjectFrame.class.getName()).log(Level.SEVERE, null, bex);
                    throw bex;
                } catch (Exception ex) {
                    Logger.getLogger(ProjectFrame.class.getName()).log(Level.SEVERE, null, ex);
                    throw ex;
                }
            }

            //log to info table:
            ProgramControler.getDBSettings().log_InfoTable("import of alleles", "count: " + insertCounter, "");

            /**
            update allel names in extract table if there are any sequences:
            update allels info in extract table based on alleles table
             */
            boolean extractDataExists = mDBSettings.check_ExistingData(DBSettings.extr_tableName);
            if (extractDataExists) {
                AllelsTableInfo mAllelsTableInfo = new AllelsTableInfo(ProgramControler, jLabel_statusLabel);
                mAllelsTableInfo.UpdateAllelInfoInExtractTable();
            }

            //allels loaded:
            JOptionPane.showMessageDialog(this,
                    "loaded: " + insertCounter + " alleles",
                    this.getName(), JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            Logger.getLogger(DBSettings.loggerProgram).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this,
                    ex.getMessage(), this.getName(), JOptionPane.INFORMATION_MESSAGE);
        } finally {
            if (br != null) {
                try {
                    br.close();
                } catch (IOException ex) {
                    Logger.getLogger(DBSettings.loggerProgram).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        //connection status:
        if (this.isConnected()) {
            this.connectionStatusLabel.setText("connected");
        } else {
            this.connectionStatusLabel.setText("not connected");
        }
    }//GEN-LAST:event_formComponentShown

    private void formInternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameActivated
        CheckConnectionStatus();
    }//GEN-LAST:event_formInternalFrameActivated

    private void jButton_allelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_allelActionPerformed
        JFileChooser chooser = null;
        try {

            if (ProgramControler.DBSettings.getMSQLite() == null) {
                throw new Exception(ProgramControler.DBSettings.exc_connectToDataBase);
            }

            chooser = new JFileChooser();
            chooser.setMultiSelectionEnabled(false);
            chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
            chooser.setFileFilter(new FastFileFilter());
            String lastDir = prefs.get("LAST_OUTPUT_DIR", null);
            if (lastDir != null && !lastDir.isEmpty()) {
                chooser.setCurrentDirectory(new File(lastDir));
            }

            int result = chooser.showOpenDialog(null);
            if (result == JFileChooser.APPROVE_OPTION) {
                File file = chooser.getSelectedFile();
                if (!file.exists()) {
                    throw new Exception("no such file");
                }
                this.jTextField_allel.setText(file.getAbsolutePath());
                prefs.put("LAST_OUTPUT_DIR", jTextField_allel.getText());

                //load  allels to database;
                AllelLoadToDB mAllelLoadToDB = new AllelLoadToDB(ProgramControler, jLabel_statusLabel, this);
                mAllelLoadToDB.setPath(this.jTextField_allel.getText());
                mAllelLoadToDB.StartProcessing();

                SetsForProcessing(Boolean.FALSE, "allel");

            } else {
                jTextField_allel.setText("");
            }

        } catch (Exception ex) {
            Logger.getLogger(DBSettings.loggerProgram).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this,
                    ex.getMessage(), this.getName(), JOptionPane.ERROR_MESSAGE);
            jTextField_allel.setText("");
        } finally {
        }
}//GEN-LAST:event_jButton_allelActionPerformed

    private void jButton_tagsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_tagsActionPerformed
        JFileChooser chooser = null;
        try {

            if (ProgramControler.DBSettings.getMSQLite() == null) {
                throw new Exception(ProgramControler.DBSettings.exc_connectToDataBase);
            }

            chooser = new JFileChooser();
            chooser.setMultiSelectionEnabled(false);
            chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
            chooser.setFileFilter(new TxtFileFilter());
            String lastDir = prefs.get("LAST_OUTPUT_DIR", null);
            if (lastDir != null && !lastDir.isEmpty()) {
                chooser.setCurrentDirectory(new File(lastDir));
            }
            int result = chooser.showOpenDialog(null);
            if (result == JFileChooser.APPROVE_OPTION) {
                File file = chooser.getSelectedFile();
                if (!file.exists()) {
                    throw new Exception("no such file");
                }
                this.jTextField_tags.setText(file.getAbsolutePath());
                prefs.put("LAST_OUTPUT_DIR", jTextField_tags.getText());

                //load  tags to database;
                this.TagsFileLoader(this.jTextField_tags.getText());
            } else {
                jTextField_tags.setText("");
            }

        } catch (Exception ex) {
            Logger.getLogger(DBSettings.loggerProgram).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this,
                    ex.getMessage(), this.getName(), JOptionPane.ERROR_MESSAGE);
            jTextField_tags.setText("");
        } finally {
        }
    }//GEN-LAST:event_jButton_tagsActionPerformed

    private void jButton_muscleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_muscleActionPerformed

        JFileChooser chooser = null;
        try {

            chooser = new JFileChooser();
            chooser.setMultiSelectionEnabled(false);
            chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
            String lastDir = this.prefs.get("MUSCLE_FILE", null);
            if (lastDir != null && !lastDir.isEmpty()) {
                chooser.setCurrentDirectory(new File(lastDir));
            }

            int result = chooser.showOpenDialog(null);
            if (result == JFileChooser.APPROVE_OPTION) {
                File file = chooser.getSelectedFile();
                if (!file.exists()) {
                    throw new Exception("no such file");
                }

                PathChecker pc = new PathChecker(file.getAbsolutePath());
                if (!pc.Check()) {
                    this.jTextField_muscle.setText("");
                    throw new Exception(pc.getMessage());
                }

                this.jTextField_muscle.setText(file.getAbsolutePath());
                prefs.put("MUSCLE_FILE", jTextField_muscle.getText());
            } else {
            }

        } catch (Exception ex) {
            Logger.getLogger(DBSettings.loggerProgram).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage(), this.getName(), JOptionPane.ERROR_MESSAGE);
        } finally {
        }
    }//GEN-LAST:event_jButton_muscleActionPerformed

    private void jRadioButton_openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton_openActionPerformed
        jRadioButton_new.setSelected(!jRadioButton_open.isSelected());
        jTextField_dbPath.setText("");
        CloseConnection();
    }//GEN-LAST:event_jRadioButton_openActionPerformed

    private Boolean isCorrectValueToDataBase(String s) {
        String[] s_arr = s.split("");
        List l = getIllegal_Path_elements();
        for (int i = 0; i < l.size(); i++) {
            Set<String> VALUES = new HashSet<String>(Arrays.asList(s_arr));
            if (VALUES.contains(l.get(i))) {
                return false;
            }
        }
        return true;
    }

    private void TagsFileLoader(String path) {
        DBSettings mDBSettings = null;
        try {
            if (path == null || path.isEmpty()) {
                throw new Exception("Set first file with tags");
            }

            //file processing:
            File tagfile = new File(path);
            if (!tagfile.exists()) {
                throw new Exception("File does-not exists");
            }

            //Data base settings
            if (this.ProgramControler.DBSettings == null || this.ProgramControler.DBSettings.getMSQLite() == null) {
                throw new Exception(DBSettings.exc_connectToDataBase);
            } else {
                mDBSettings = this.ProgramControler.DBSettings;
            }

            mDBSettings.check_ExistingData(DBSettings.tags_tableName, this);

            // Prepare a Scanner that will "scan" the document
            Scanner opnScanner = new Scanner(tagfile);


            // Read each line in the file
            int insertCounter = 0;
            while (opnScanner.hasNext()) {
                try {

                    String tag = "";
                    String file = "";
                    String species = "";

                    String line = opnScanner.nextLine();
                    String[] t = line.split("\\s");
                    if (t != null) {
                        for (int i = 0; i < t.length; i++) {
                            switch (i) {
                                case 0:
                                    tag = t[i].toUpperCase();
                                    break;
                                case 1:
                                    file = t[i];
                                    break;
                                case 2:
                                    species = t[i];
                                    break;
                                default:
                                    break;
                            }
                        }

                        if (tag == null || tag.isEmpty() || file == null || file.isEmpty() || species == null || species.isEmpty()) {
                            throw new Exception("Incorrect file format!\n");
                        }

                        if (!isCorrectValueToDataBase(tag) || !isCorrectValueToDataBase(file) || !isCorrectValueToDataBase(species)) {
                            throw new Exception("Incorrect value in Tags file eg " + getIllegal_Path_elements().toString() + " \n");
                        }

                        //insert:
                        String sql = "INSERT INTO " + ProgramControler.DBSettings.tags_tableName + " "
                                + "(" + ProgramControler.DBSettings.tags_tag + ","
                                + ProgramControler.DBSettings.tags_file + ","
                                + ProgramControler.DBSettings.tags_species + ") "
                                + "VALUES ('" + tag + "','" + file + "','" + species + "')";
                        this.ProgramControler.getDBSettings().getMSQLite().Execute(sql);
                        insertCounter++;
                    }
                } catch (Exception ex) {
                    throw ex;
                }
            }

            //log to info table:
            ProgramControler.getDBSettings().log_InfoTable("tags, file, species import", "count: " + insertCounter, "");

            JOptionPane.showMessageDialog(this,
                    "loaded: " + insertCounter + " records",
                    this.getName(), JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            Logger.getLogger(DBSettings.loggerProgram).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage(), this.getName(), JOptionPane.ERROR_MESSAGE);
        }
    }

    public void SetsForProcessing(Boolean b, String l) {
        if (l.equals("allel")) {
            this.jButton_allel.setEnabled(b);
        }
        jButton_close.setEnabled(b);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel connectionStatusLabel;
    private javax.swing.JButton jButton_allel;
    private javax.swing.JButton jButton_close;
    private javax.swing.JButton jButton_muscle;
    private javax.swing.JButton jButton_openDB;
    private javax.swing.JButton jButton_tags;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JRadioButton jRadioButton_new;
    private javax.swing.JRadioButton jRadioButton_open;
    private javax.swing.JTextField jTextField_allel;
    private javax.swing.JTextField jTextField_dbPath;
    private javax.swing.JTextField jTextField_muscle;
    private javax.swing.JTextField jTextField_tags;
    // End of variables declaration//GEN-END:variables
}
